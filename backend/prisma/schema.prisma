// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(USER)
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  reports      Report[]
  resumes      Resume[]
  policies     Policy[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Organization {
  id       Int     @id @default(autoincrement())
  name     String
  users    User[]
  metrics  Metric[]
}

model Resume {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  filePath       String
  analysisResult AnalysisResult? @relation(fields: [analysisResultId], references: [id])
  analysisResultId Int?         @unique
  uploadedAt     DateTime       @default(now())
}

model Policy {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  filePath       String
  analysisResult AnalysisResult? @relation(fields: [analysisResultId], references: [id])
  analysisResultId Int?         @unique
  uploadedAt     DateTime       @default(now())
}

model AnalysisResult {
  id         Int      @id @default(autoincrement())
  data       Json
  resume     Resume?
  policy     Policy?
  createdAt  DateTime @default(now())
}

model Report {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  description String
  status      ReportStatus  @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Metric {
  id             Int           @id @default(autoincrement())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  data           Json
  createdAt      DateTime      @default(now())
}

enum Role {
  USER
  ADMIN
  ORG_USER
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
